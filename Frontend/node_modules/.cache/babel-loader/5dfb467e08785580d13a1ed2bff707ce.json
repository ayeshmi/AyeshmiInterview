{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayesh\\\\EIRLSassignment\\\\src\\\\components\\\\pages\\\\CropImage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport CropDialog from \"./CropDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PIXEL_RATIO = 4;\nexport default function CropImage(props) {\n  _s();\n\n  const [crop, setCrop] = React.useState({\n    unit: \"%\",\n    width: 80,\n    height: 80,\n    aspect: 16 / 9\n  });\n  const [src, setSrc] = React.useState();\n  const [completedCrop, setCompletedCrop] = React.useState();\n  const [open, setModalOpen] = React.useState(false);\n  const [preview, setPreview] = React.useState();\n  const [croppedFile, setCroppedFile] = React.useState();\n  const imgRef = React.useRef(null);\n  const previewCanvasRef = React.useRef(null);\n  const onLoad = React.useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  React.useEffect(() => {\n    if (props.selectedFile) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setSrc(reader.result));\n      reader.readAsDataURL(props.selectedFile);\n      setModalOpen(true);\n    }\n  }, [props.selectedFile]);\n  React.useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = crop.width * PIXEL_RATIO;\n    canvas.height = crop.height * PIXEL_RATIO;\n    ctx.setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    canvas.toBlob(blob => {\n      const previewUrl = URL.createObjectURL(blob);\n      const newFile = new File([blob], props.selectedFile.name);\n      setPreview(previewUrl);\n      setCroppedFile(newFile);\n    }, \"image/jpg\");\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CropDialog, {\n      open: open,\n      onHide: () => setModalOpen(false),\n      onSave: () => {\n        props.onSave({\n          file: croppedFile,\n          preview\n        });\n        setModalOpen(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: src,\n        style: {\n          maxHeight: \"550px\"\n        },\n        crop: crop,\n        locked: true,\n        onChange: (crop, percentCrop) => setCrop(percentCrop),\n        onComplete: c => setCompletedCrop(c),\n        onImageLoaded: onLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: previewCanvasRef,\n      style: {\n        width: 0,\n        height: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CropImage, \"4HYtIC0Qrf9uUm0BPNdp/X4DH20=\");\n\n_c = CropImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropImage\");","map":{"version":3,"sources":["C:/Users/ayesh/EIRLSassignment/src/components/pages/CropImage.js"],"names":["React","ReactCrop","CropDialog","PIXEL_RATIO","CropImage","props","crop","setCrop","useState","unit","width","height","aspect","src","setSrc","completedCrop","setCompletedCrop","open","setModalOpen","preview","setPreview","croppedFile","setCroppedFile","imgRef","useRef","previewCanvasRef","onLoad","useCallback","img","current","useEffect","selectedFile","reader","FileReader","addEventListener","result","readAsDataURL","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingEnabled","drawImage","x","y","toBlob","blob","previewUrl","URL","createObjectURL","newFile","File","name","onSave","file","maxHeight","percentCrop","c"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport CropDialog from \"./CropDialog\";\r\n\r\nconst PIXEL_RATIO = 4;\r\nexport default function CropImage(props) {\r\n  const [crop, setCrop] = React.useState({\r\n    unit: \"%\",\r\n    width: 80,\r\n    height:80,\r\n    aspect: 16 / 9,\r\n  });\r\n\r\n  const [src, setSrc] = React.useState();\r\n\r\n  const [completedCrop, setCompletedCrop] = React.useState();\r\n\r\n  const [open, setModalOpen] = React.useState(false);\r\n\r\n  const [preview, setPreview] = React.useState();\r\n  const [croppedFile, setCroppedFile] = React.useState();\r\n\r\n  const imgRef = React.useRef(null);\r\n\r\n  const previewCanvasRef = React.useRef(null);\r\n\r\n  const onLoad = React.useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (props.selectedFile) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setSrc(reader.result));\r\n      reader.readAsDataURL(props.selectedFile);\r\n      setModalOpen(true);\r\n    }\r\n  }, [props.selectedFile]);\r\n\r\n  React.useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = crop.width * PIXEL_RATIO;\r\n    canvas.height = crop.height * PIXEL_RATIO;\r\n\r\n    ctx.setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);\r\n    ctx.imageSmoothingEnabled = false;\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    canvas.toBlob((blob) => {\r\n      const previewUrl = URL.createObjectURL(blob);\r\n      const newFile = new File([blob], props.selectedFile.name);\r\n\r\n      setPreview(previewUrl);\r\n      setCroppedFile(newFile);\r\n    }, \"image/jpg\");\r\n  }, [completedCrop]);\r\n\r\n  return (\r\n    <>\r\n      <CropDialog\r\n        open={open}\r\n        onHide={() => setModalOpen(false)}\r\n        onSave={() => {\r\n          props.onSave({ file: croppedFile, preview });\r\n          setModalOpen(false);\r\n        }}\r\n      >\r\n        <ReactCrop\r\n          src={src}\r\n          style={{ maxHeight: \"550px\" }}\r\n          crop={crop}\r\n          locked\r\n          onChange={(crop, percentCrop) => setCrop(percentCrop)}\r\n          onComplete={(c) => setCompletedCrop(c)}\r\n          onImageLoaded={onLoad}\r\n        />\r\n      </CropDialog>\r\n\r\n      <canvas ref={previewCanvasRef} style={{ width: 0, height: 0 }} />\r\n    </>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}