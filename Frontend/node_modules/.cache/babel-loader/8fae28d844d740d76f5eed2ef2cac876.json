{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8082/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + \"signin\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n  }\n\n  deleteUser(id) {\n    return axios.delete(API_URL + \"deleteUser/\" + id);\n  }\n\n  updateBook(id) {\n    this.props.history.push(`/viewSelectedUser/${id}`);\n    window.location.reload();\n  }\n\n  getUserByID(id) {\n    return axios.get('http://localhost:8082/api/auth/getUserByID/' + id);\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  getSubscribers() {\n    return axios.get(API_URL + \"allSubscribers\");\n  }\n\n  addNewSubscriber(firstName, lastName, email, subscriberMSISDN, subscriberPIN, voiceMailAccountStatus) {\n    return axios.post(API_URL + \"newSubscriber\", {\n      firstName,\n      lastName,\n      email,\n      subscriberMSISDN,\n      subscriberPIN,\n      voiceMailAccountStatus\n    });\n  }\n\n  update(id, username, email, firstName, lastName) {\n    return axios.put(API_URL + \"updateUser\", {\n      id,\n      username,\n      email,\n      firstName,\n      lastName\n    });\n  }\n\n  getUserProfilePicture(username) {\n    return axios.get(API_URL + \"profilePicture/\" + username);\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n    ;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/ayesh/OneDrive/Desktop/Wavenet/Frontend/src/components/services/auth.service.js"],"names":["axios","API_URL","AuthService","login","username","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","deleteUser","id","delete","updateBook","props","history","push","window","location","reload","getUserByID","get","logout","removeItem","getSubscribers","addNewSubscriber","firstName","lastName","email","subscriberMSISDN","subscriberPIN","voiceMailAccountStatus","update","put","getUserProfilePicture","getCurrentUser","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,iCAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,WAAOL,KAAK,CACTM,IADI,CACCL,OAAO,GAAG,QADX,EACqB;AACxBG,MAAAA,QADwB;AAExBC,MAAAA;AAFwB,KADrB,EAKJE,IALI,CAKCC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAlB,EAA+B;AAC7BC,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACC,IAAxB,CAA7B;AACD;;AAED,aAAOD,QAAQ,CAACC,IAAhB;AACD,KAXI,CAAP;AAYD;;AAEDM,EAAAA,UAAU,CAACC,EAAD,EAAK;AACb,WAAOhB,KAAK,CAACiB,MAAN,CAAahB,OAAO,GAAG,aAAV,GAA0Be,EAAvC,CAAP;AACD;;AAEDE,EAAAA,UAAU,CAACF,EAAD,EAAK;AACb,SAAKG,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAyB,qBAAoBL,EAAG,EAAhD;AACAM,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AAEDC,EAAAA,WAAW,CAACT,EAAD,EAAK;AACd,WAAOhB,KAAK,CAAC0B,GAAN,CAAU,gDAAgDV,EAA1D,CAAP;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACPhB,IAAAA,YAAY,CAACiB,UAAb,CAAwB,MAAxB;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAO7B,KAAK,CAAC0B,GAAN,CAAUzB,OAAO,GAAG,gBAApB,CAAP;AACD;;AAED6B,EAAAA,gBAAgB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,gBAA7B,EAA+CC,aAA/C,EAA6DC,sBAA7D,EAAqF;AACnG,WAAOpC,KAAK,CAACM,IAAN,CAAWL,OAAO,GAAG,eAArB,EAAsC;AAC3C8B,MAAAA,SAD2C;AAChCC,MAAAA,QADgC;AACtBC,MAAAA,KADsB;AACfC,MAAAA,gBADe;AACGC,MAAAA,aADH;AACiBC,MAAAA;AADjB,KAAtC,CAAP;AAGD;;AAEDC,EAAAA,MAAM,CAACrB,EAAD,EAAKZ,QAAL,EAAe6B,KAAf,EAAsBF,SAAtB,EAAiCC,QAAjC,EAA2C;AAC/C,WAAOhC,KAAK,CAACsC,GAAN,CAAUrC,OAAO,GAAG,YAApB,EAAkC;AACvCe,MAAAA,EADuC;AAEvCZ,MAAAA,QAFuC;AAGvC6B,MAAAA,KAHuC;AAIvCF,MAAAA,SAJuC;AAKvCC,MAAAA;AALuC,KAAlC,CAAP;AAOD;;AAEDO,EAAAA,qBAAqB,CAACnC,QAAD,EAAW;AAC9B,WAAOJ,KAAK,CAAC0B,GAAN,CAAUzB,OAAO,GAAG,iBAAV,GAA8BG,QAAxC,CAAP;AACD;;AAIDoC,EAAAA,cAAc,GAAG;AACf,WAAO3B,IAAI,CAAC4B,KAAL,CAAW9B,YAAY,CAAC+B,OAAb,CAAqB,MAArB,CAAX,CAAP;AAAgD;AACjD;;AA7De;;AAkElB,eAAe,IAAIxC,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8082/api/auth/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  deleteUser(id) {\r\n    return axios.delete(API_URL + \"deleteUser/\" + id);\r\n  }\r\n\r\n  updateBook(id) {\r\n    this.props.history.push(`/viewSelectedUser/${id}`);\r\n    window.location.reload();\r\n  }\r\n\r\n  getUserByID(id) {\r\n    return axios.get('http://localhost:8082/api/auth/getUserByID/' + id);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  getSubscribers() {\r\n    return axios.get(API_URL + \"allSubscribers\");\r\n  }\r\n \r\n  addNewSubscriber(firstName, lastName, email, subscriberMSISDN, subscriberPIN,voiceMailAccountStatus) {\r\n    return axios.post(API_URL + \"newSubscriber\", {\r\n      firstName, lastName, email, subscriberMSISDN, subscriberPIN,voiceMailAccountStatus\r\n    });\r\n  }\r\n\r\n  update(id, username, email, firstName, lastName) {\r\n    return axios.put(API_URL + \"updateUser\", {\r\n      id,\r\n      username,\r\n      email,\r\n      firstName,\r\n      lastName\r\n    });\r\n  }\r\n\r\n  getUserProfilePicture(username) {\r\n    return axios.get(API_URL + \"profilePicture/\" + username);\r\n  }\r\n\r\n\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}